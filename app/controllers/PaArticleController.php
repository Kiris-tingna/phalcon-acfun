<?php
 
use Phalcon\Mvc\Model\Criteria;
use Phalcon\Paginator\Adapter\Model as Paginator;

class PaArticleController extends AdminController
{
    public function initialize()
    {
        $this->view->setTemplateAfter('admin');
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index action
     */
    public function indexAction()
    {
        $this->persistent->parameters = null;
    }

    /**
     * Searches for pa_article
     */
    public function searchAction()
    {

        $numberPage = 1;
        if ($this->request->isPost()) {
            $query = Criteria::fromInput($this->di, "PaArticle", $_POST);
            $this->persistent->parameters = $query->getParams();
        } else {
            $numberPage = $this->request->getQuery("page", "int");
        }

        $parameters = $this->persistent->parameters;
        if (!is_array($parameters)) {
            $parameters = array();
        }
        $parameters["order"] = "id";

        $pa_article = PaArticle::find($parameters);
        if (count($pa_article) == 0) {
            $this->flash->notice("The search did not find any pa_article");

            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "index"
            ));
        }

        $paginator = new Paginator(array(
            "data" => $pa_article,
            "limit"=> 10,
            "page" => $numberPage
        ));

        $this->view->page = $paginator->getPaginate();
    }

    /**
     * Displays the creation form
     */
    public function newAction()
    {

    }

    /**
     * Edits a pa_article
     *
     * @param string $id
     */
    public function editAction($id)
    {

        if (!$this->request->isPost()) {

            $pa_article = PaArticle::findFirstByid($id);
            if (!$pa_article) {
                $this->flash->error("pa_article was not found");

                return $this->dispatcher->forward(array(
                    "controller" => "pa_article",
                    "action" => "index"
                ));
            }

            $this->view->id = $pa_article->id;

            $this->tag->setDefault("id", $pa_article->id);
            $this->tag->setDefault("title", $pa_article->title);
            $this->tag->setDefault("content", $pa_article->content);
            $this->tag->setDefault("created_at", $pa_article->created_at);
            $this->tag->setDefault("published_at", $pa_article->published_at);
            $this->tag->setDefault("views", $pa_article->views);
            
        }
    }

    /**
     * Creates a new pa_article
     */
    public function createAction()
    {

        if (!$this->request->isPost()) {
            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "index"
            ));
        }

        $pa_article = new PaArticle();

        $pa_article->title = $this->request->getPost("title");
        $pa_article->content = $this->request->getPost("content");
//        $pa_article->created_at = strtotime($this->request->getPost("created_at"));
        $pa_article->published_at = date('Y-m-d H:i:s', strtotime($this->request->getPost("published_at")));
        $pa_article->views = $this->request->getPost("views");

        if (!$pa_article->save()) {
            foreach ($pa_article->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "new"
            ));
        }

        $this->flash->success("pa_article was created successfully");

        return $this->dispatcher->forward(array(
            "controller" => "pa_article",
            "action" => "index"
        ));

    }

    /**
     * Saves a pa_article edited
     *
     */
    public function saveAction()
    {

        if (!$this->request->isPost()) {
            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "index"
            ));
        }

        $id = $this->request->getPost("id");

        $pa_article = PaArticle::findFirstByid($id);
        if (!$pa_article) {
            $this->flash->error("pa_article does not exist " . $id);

            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "index"
            ));
        }

        $pa_article->title = $this->request->getPost("title");
        $pa_article->content = $this->request->getPost("content");
        $pa_article->created_at = date('Y-m-d H:i:s', strtotime($this->request->getPost("created_at")));
        $pa_article->published_at = date('Y-m-d H:i:s', strtotime($this->request->getPost("published_at")));
        $pa_article->views = $this->request->getPost("views");
        

        if (!$pa_article->save()) {

            foreach ($pa_article->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "edit",
                "params" => array($pa_article->id)
            ));
        }

        $this->flash->success("pa_article was updated successfully");

        return $this->dispatcher->forward(array(
            "controller" => "pa_article",
            "action" => "index"
        ));

    }

    /**
     * Deletes a pa_article
     *
     * @param string $id
     */
    public function deleteAction($id)
    {

        $pa_article = PaArticle::findFirstByid($id);
        if (!$pa_article) {
            $this->flash->error("pa_article was not found");

            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "index"
            ));
        }

        if (!$pa_article->delete()) {

            foreach ($pa_article->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                "controller" => "pa_article",
                "action" => "search"
            ));
        }

        $this->flash->success("pa_article was deleted successfully");

        return $this->dispatcher->forward(array(
            "controller" => "pa_article",
            "action" => "index"
        ));
    }

}
