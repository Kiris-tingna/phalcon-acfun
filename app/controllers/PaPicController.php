<?php
 
use Phalcon\Mvc\Model\Criteria;
use Phalcon\Paginator\Adapter\Model as Paginator;

class PaPicController extends AdminController
{
    public function initialize()
    {
        $this->view->setTemplateAfter('admin');
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * Index action
     */
    public function indexAction()
    {
        $this->persistent->parameters = null;// 持久数据
    }

    /**
     * Searches for pa_pic
     */
    public function searchAction()
    {

        $numberPage = 1;
        if ($this->request->isPost()) {
            $query = Criteria::fromInput($this->di, "PaPic", $_POST);
            $this->persistent->parameters = $query->getParams();
        } else {
            $numberPage = $this->request->getQuery("page", "int");
        }

        $parameters = $this->persistent->parameters;
        if (!is_array($parameters)) {
            $parameters = array();
        }
        $parameters["order"] = "id";

        $pa_pic = PaPic::find($parameters);
        if (count($pa_pic) == 0) {
            $this->flash->notice("The search did not find any pa_pic");

            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "index"
            ));
        }

        $paginator = new Paginator(array(
            "data" => $pa_pic,
            "limit"=> 10,
            "page" => $numberPage
        ));

        $this->view->page = $paginator->getPaginate();
    }

    /**
     * Displays the creation form
     */
    public function newAction()
    {

    }

    /**
     * Edits a pa_pic
     *
     * @param string $id
     */
    public function editAction($id)
    {

        if (!$this->request->isPost()) {

            $pa_pic = PaPic::findFirstByid($id);
            if (!$pa_pic) {
                $this->flash->error("pa_pic was not found");

                return $this->dispatcher->forward(array(
                    "controller" => "pa_pic",
                    "action" => "index"
                ));
            }

            $this->view->id = $pa_pic->id;

            $this->tag->setDefault("id", $pa_pic->id);
            $this->tag->setDefault("thumb_small", $pa_pic->thumb_small);
            $this->tag->setDefault("thumb_middle", $pa_pic->thumb_middle);
            $this->tag->setDefault("thumb_large", $pa_pic->thumb_large);
            $this->tag->setDefault("origin_url", $pa_pic->origin_url);
            
        }
    }

    /**
     * Creates a new pa_pic
     */
    public function createAction()
    {

        if (!$this->request->isPost()) {
            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "index"
            ));
        }

        $pa_pic = new PaPic();

        $pa_pic->thumb_small = $this->request->getPost("thumb_small");
        $pa_pic->thumb_middle = $this->request->getPost("thumb_middle");
        $pa_pic->thumb_large = $this->request->getPost("thumb_large");
        $pa_pic->origin_url = $this->request->getPost("origin_url");
        

        if (!$pa_pic->save()) {
            foreach ($pa_pic->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "new"
            ));
        }

        $this->flash->success("pa_pic was created successfully");

        return $this->dispatcher->forward(array(
            "controller" => "pa_pic",
            "action" => "index"
        ));

    }

    /**
     * Saves a pa_pic edited
     *
     */
    public function saveAction()
    {

        if (!$this->request->isPost()) {
            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "index"
            ));
        }

        $id = $this->request->getPost("id");

        $pa_pic = PaPic::findFirstByid($id);
        if (!$pa_pic) {
            $this->flash->error("pa_pic does not exist " . $id);

            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "index"
            ));
        }

        $pa_pic->thumb_small = $this->request->getPost("thumb_small");
        $pa_pic->thumb_middle = $this->request->getPost("thumb_middle");
        $pa_pic->thumb_large = $this->request->getPost("thumb_large");
        $pa_pic->origin_url = $this->request->getPost("origin_url");
        

        if (!$pa_pic->save()) {

            foreach ($pa_pic->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "edit",
                "params" => array($pa_pic->id)
            ));
        }

        $this->flash->success("pa_pic was updated successfully");

        return $this->dispatcher->forward(array(
            "controller" => "pa_pic",
            "action" => "index"
        ));

    }

    /**
     * Deletes a pa_pic
     *
     * @param string $id
     */
    public function deleteAction($id)
    {

        $pa_pic = PaPic::findFirstByid($id);
        if (!$pa_pic) {
            $this->flash->error("pa_pic was not found");

            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "index"
            ));
        }

        if (!$pa_pic->delete()) {

            foreach ($pa_pic->getMessages() as $message) {
                $this->flash->error($message);
            }

            return $this->dispatcher->forward(array(
                "controller" => "pa_pic",
                "action" => "search"
            ));
        }

        $this->flash->success("pa_pic was deleted successfully");

        return $this->dispatcher->forward(array(
            "controller" => "pa_pic",
            "action" => "index"
        ));
    }

}
